---
import StudentLayout from "../layouts/StudentLayout.astro";

const title = "Dashboard";

// Sample data for student (rendered server-side but editable client-side via the small script below)
const assignments = [
  { id: 1, title: 'Motion & Forces', due: 'Oct 20', description: 'Understanding fundamental principles of motion and forces in physical systems.', status: 'assigned', progress: 0 },
  { id: 2, title: 'Angular Momentum', due: 'Oct 25', description: 'Exploring rotational motion through practical examples and simulations.', status: 'in-progress', progress: 60 },
  { id: 3, title: 'Energy Conservation', due: 'Oct 30', description: 'Analyzing energy transformations in mechanical systems.', status: 'submitted', progress: 100 }
];

const recentGrades = [
  { id: 1, assignment: 'Wave Motion', grade: 'A-', points: '92/100', feedback: 'Excellent understanding of wave properties' },
  { id: 2, assignment: 'Thermodynamics', grade: 'B+', points: '87/100', feedback: 'Good analysis, minor calculation errors' },
  { id: 3, assignment: 'Optics Lab', grade: 'A', points: '96/100', feedback: 'Outstanding experimental technique' }
];

const announcements = [
  { id: 1, title: 'Midterm Exam Schedule', message: 'Physics midterm will be held on November 5th at 2:00 PM', timestamp: '2 hours ago', type: 'important' },
  { id: 2, title: 'Lab Equipment Update', message: 'New oscilloscopes available in Physics Lab B starting Monday', timestamp: '1 day ago', type: 'info' },
  { id: 3, title: 'Office Hours Change', message: 'Office hours moved to Tuesday 3-5 PM this week only', timestamp: '2 days ago', type: 'warning' }
];

// Calculate overall progress
const overallProgress = Math.round(assignments.reduce((acc, a) => acc + a.progress, 0) / assignments.length);
const completedAssignments = assignments.filter(a => a.status === 'submitted').length;
const pendingAssignments = assignments.filter(a => a.status !== 'submitted').length;
---

<StudentLayout title={title} selectedItem="dashboard">
  <div class="student-dashboard">
    <div class="dashboard-header">
      <div class="header-content">
        <h1>Student Dashboard</h1>
        <p class="welcome-message">Welcome back — track your assignments, grades, and announcements below.</p>
      </div>

      <div class="quick-stats">
        <div class="stat-card">
          <div class="stat-number">{completedAssignments}</div>
          <div class="stat-label">Completed</div>
        </div>
        <div class="stat-card">
          <div class="stat-number">{pendingAssignments}</div>
          <div class="stat-label">Pending</div>
        </div>
        <div class="stat-card">
          <div class="stat-number">{overallProgress}%</div>
          <div class="stat-label">Progress</div>
        </div>
      </div>
    </div>

    <div class="dashboard-grid">
      <section class="assignments-section">
        <h2>Current Assignments</h2>
        <div id="assignments" class="card-container">
          {assignments.map(a => (
            <article class="assignment-card" data-id={a.id}>
              <div class="card-header">
                <h3>{a.title}</h3>
                <span class={`status-badge ${a.status}`}>{
                  a.status === 'assigned' ? 'Not Started' :
                  a.status === 'in-progress' ? 'In Progress' :
                  'Submitted'
                }</span>
              </div>
              <p class="assignment-description">{a.description}</p>
              <div class="assignment-meta">
                <span class="due-date">Due: {a.due}</span>
                <div class="progress-section">
                  <div class="progress-bar">
                    <div class="progress" style={`width: ${a.progress}%;`}></div>
                  </div>
                  <span class="progress-text">{a.progress}%</span>
                </div>
              </div>
              <div class="card-actions">
                {a.status !== 'submitted' && (
                  <a href={`/assignments/${a.id}`} class="btn-primary">
                    {a.status === 'assigned' ? 'Start Assignment' : 'Continue'}
                  </a>
                )}
                {a.status === 'submitted' && (
                  <a href={`/assignments/${a.id}`} class="btn-secondary">View Submission</a>
                )}
              </div>
            </article>
          ))}
        </div>
      </section>

      <div class="sidebar-content">
        <section class="grades-section">
          <h2>Recent Grades</h2>
          <div id="grades" class="grades-list">
            {recentGrades.map(grade => (
              <div class="grade-item" data-id={grade.id}>
                <div class="grade-header">
                  <span class="assignment-name">{grade.assignment}</span>
                  <span class={`grade ${grade.grade.startsWith('A') ? 'grade-a' : grade.grade.startsWith('B') ? 'grade-b' : 'grade-c'}`}>
                    {grade.grade}
                  </span>
                </div>
                <div class="grade-details">
                  <span class="points">{grade.points}</span>
                  <span class="feedback">{grade.feedback}</span>
                </div>
              </div>
            ))}
            <a href="/grades" class="view-all-link">View All Grades →</a>
          </div>
        </section>

        <section class="announcements-section">
          <h2>Announcements</h2>
          <div id="announcements" class="announcements-list">
            {announcements.map(ann => (
              <div class={`announcement-item ${ann.type}`} data-id={ann.id}>
                <div class="announcement-header">
                  <h4>{ann.title}</h4>
                  <span class="timestamp">{ann.timestamp}</span>
                </div>
                <p class="announcement-message">{ann.message}</p>
              </div>
            ))}
          </div>
        </section>
      </div>
    </div>
  </div>
</StudentLayout>

<style>
  :root {
    --bg: #1c1c1c;
    --panel: #242424;
    --muted: var(--color-text-muted);
    --accent1: rgb(139, 0, 0);
    --accent2: rgba(139, 0, 0, 0.8);
    --card-bg: rgba(139, 0, 0, 0.1);
    --card-border: rgba(139, 0, 0, 0.2);
    --success: #10b981;
    --warning: #f59e0b;
    --danger: #ef4444;
    --info: #3b82f6;
  }

  .student-dashboard {
    padding: 0;
    font-family: 'IBM Plex Sans', system-ui, sans-serif;
    width: 100%;
    height: 100%;
    max-width: 100%;
    box-sizing: border-box;
    color: #E6EEF8;
    overflow: hidden;
    display: flex;
    flex-direction: column;
  }

  .dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0 1.5rem 1.25rem;
    flex-wrap: wrap;
    gap: 1rem;
    position: sticky;
    top: 0;
    background: var(--bg);
    z-index: 10;
  }

  .header-content h1 {
    font-size: 2rem;
    font-weight: 600;
    background: linear-gradient(45deg, var(--accent1), #EF4444);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    margin: 0;
  }

  .welcome-message { 
    color: var(--muted); 
    margin: 0.25rem 0 0 0; 
  }

  .quick-stats {
    display: flex;
    gap: 1rem;
  }

  .stat-card {
    background: var(--panel);
    border: 1px solid var(--card-border);
    border-radius: 8px;
    padding: 1rem;
    text-align: center;
    min-width: 80px;
  }

  .stat-number {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--accent1);
    margin-bottom: 0.25rem;
  }

  .stat-label {
    font-size: 0.8rem;
    color: var(--muted);
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .dashboard-grid {
    display: grid;
    grid-template-columns: minmax(0, 1fr) 380px;
    gap: 1.25rem;
    max-width: 100%;
    width: 100%;
    padding: 1.5rem;
    flex: 1;
    height: calc(100vh - 140px);
  }

  @media (max-width: 1200px) {
    .dashboard-grid {
      grid-template-columns: 1fr;
      grid-auto-rows: minmax(min-content, 400px);
      height: auto;
      overflow-y: auto;
    }
  }

  section {
    background: var(--panel);
    border-radius: 8px;
    padding: 1.25rem;
    border: 1px solid rgba(255, 255, 255, 0.05);
    width: 100%;
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
  }

  .assignments-section {
    max-height: calc(100vh - 180px);
  }

  .sidebar-content {
    display: flex;
    flex-direction: column;
    gap: 1.25rem;
    max-height: calc(100vh - 180px);
  }

  .sidebar-content section {
    flex: 1;
    padding: 1rem;
  }

  section > div {
    overflow-y: auto;
    flex: 1;
    min-height: 0;
    padding-right: 4px;
  }

  section > div::-webkit-scrollbar {
    width: 6px;
  }

  section > div::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.02);
    border-radius: 3px;
  }

  section > div::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 3px;
  }

  section h2 {
    margin: 0 0 1rem 0;
    color: #F8FAFC;
    font-size: 1.2rem;
  }

  .card-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 1rem;
    width: 100%;
  }

  .assignment-card {
    background: var(--card-bg);
    border-radius: 10px;
    padding: 1.25rem;
    border: 1px solid var(--card-border);
    transition: all 0.15s;
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .assignment-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(139, 0, 0, 0.15);
  }

  .card-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    gap: 0.5rem;
  }

  .card-header h3 {
    margin: 0;
    color: #F8FAFC;
    font-size: 1.1rem;
    flex: 1;
  }

  .status-badge {
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.75rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .status-badge.assigned {
    background: rgba(156, 163, 175, 0.2);
    color: #d1d5db;
  }

  .status-badge.in-progress {
    background: rgba(59, 130, 246, 0.2);
    color: #60a5fa;
  }

  .status-badge.submitted {
    background: rgba(16, 185, 129, 0.2);
    color: #34d399;
  }

  .assignment-description {
    color: var(--muted);
    font-size: 0.9rem;
    line-height: 1.4;
    margin: 0;
  }

  .assignment-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;
  }

  .due-date {
    color: var(--warning);
    font-size: 0.85rem;
    font-weight: 500;
  }

  .progress-section {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    flex: 1;
  }

  .progress-bar {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 10px;
    height: 6px;
    flex: 1;
    overflow: hidden;
  }

  .progress {
    height: 100%;
    background: linear-gradient(90deg, var(--accent1), #ef4444);
    border-radius: 10px;
    transition: width 0.3s ease;
  }

  .progress-text {
    font-size: 0.8rem;
    color: var(--muted);
    min-width: 35px;
  }

  .card-actions {
    display: flex;
    gap: 0.5rem;
    margin-top: auto;
  }

  .btn-primary, .btn-secondary {
    padding: 0.5rem 1rem;
    border-radius: 6px;
    text-decoration: none;
    font-size: 0.85rem;
    font-weight: 500;
    transition: all 0.15s;
    text-align: center;
    flex: 1;
  }

  .btn-primary {
    background: var(--accent1);
    color: white;
  }

  .btn-primary:hover {
    background: var(--accent2);
  }

  .btn-secondary {
    background: rgba(255, 255, 255, 0.1);
    color: var(--muted);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .btn-secondary:hover {
    background: rgba(255, 255, 255, 0.15);
    color: white;
  }

  /* Grades Section */
  .grades-list {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .grade-item {
    background: rgba(255, 255, 255, 0.03);
    border-radius: 8px;
    padding: 0.875rem;
    border: 1px solid rgba(255, 255, 255, 0.08);
    transition: all 0.15s;
  }

  .grade-item:hover {
    background: rgba(255, 255, 255, 0.06);
  }

  .grade-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
  }

  .assignment-name {
    font-weight: 500;
    color: #F8FAFC;
  }

  .grade {
    font-weight: 600;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.85rem;
  }

  .grade-a {
    background: rgba(16, 185, 129, 0.2);
    color: #34d399;
  }

  .grade-b {
    background: rgba(59, 130, 246, 0.2);
    color: #60a5fa;
  }

  .grade-c {
    background: rgba(245, 158, 11, 0.2);
    color: #fbbf24;
  }

  .grade-details {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .points {
    font-size: 0.85rem;
    color: var(--muted);
  }

  .feedback {
    font-size: 0.8rem;
    color: var(--muted);
    font-style: italic;
  }

  .view-all-link {
    color: var(--accent1);
    text-decoration: none;
    font-size: 0.9rem;
    font-weight: 500;
    margin-top: 0.5rem;
    display: block;
    text-align: center;
    transition: color 0.15s;
  }

  .view-all-link:hover {
    color: #ef4444;
  }

  /* Announcements Section */
  .announcements-list {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .announcement-item {
    background: rgba(255, 255, 255, 0.03);
    border-radius: 8px;
    padding: 0.875rem;
    border-left: 4px solid;
    transition: all 0.15s;
  }

  .announcement-item.important {
    border-left-color: var(--danger);
    background: rgba(239, 68, 68, 0.05);
  }

  .announcement-item.info {
    border-left-color: var(--info);
    background: rgba(59, 130, 246, 0.05);
  }

  .announcement-item.warning {
    border-left-color: var(--warning);
    background: rgba(245, 158, 11, 0.05);
  }

  .announcement-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 0.5rem;
    gap: 0.5rem;
  }

  .announcement-header h4 {
    margin: 0;
    font-size: 0.9rem;
    font-weight: 500;
    color: #F8FAFC;
  }

  .timestamp {
    font-size: 0.75rem;
    color: var(--muted);
    white-space: nowrap;
  }

  .announcement-message {
    margin: 0;
    font-size: 0.85rem;
    color: var(--muted);
    line-height: 1.4;
  }

  @media (max-width: 768px) {
    .dashboard-header {
      flex-direction: column;
      align-items: flex-start;
    }

    .quick-stats {
      width: 100%;
      justify-content: space-between;
    }

    .card-container {
      grid-template-columns: 1fr;
    }

    .assignment-meta {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }

    .progress-section {
      width: 100%;
    }
  }
</style>