---
import StudentLayout from "../layouts/StudentLayout.astro";

const title = "Assignments";

// Sample assignments data
const assignments = [
  { 
    id: 1, 
    title: 'Motion & Forces', 
    due: 'Oct 20, 2024', 
    dueDate: new Date('2024-10-20'),
    description: 'Understanding fundamental principles of motion and forces in physical systems. Complete the interactive simulations and submit your analysis report.',
    status: 'assigned', 
    progress: 0,
    points: 100,
    instructions: 'Complete all 5 simulation exercises and write a 500-word analysis report.',
    materials: ['Simulation Software', 'Lab Manual Chapter 3', 'Calculator'],
    submitted: null
  },
  { 
    id: 2, 
    title: 'Angular Momentum', 
    due: 'Oct 25, 2024', 
    dueDate: new Date('2024-10-25'),
    description: 'Exploring rotational motion through practical examples and simulations. Analyze spinning objects and calculate angular momentum.',
    status: 'in-progress', 
    progress: 60,
    points: 150,
    instructions: 'Use the provided datasets to calculate angular momentum for various objects. Submit calculations and graphs.',
    materials: ['Dataset Files', 'Graphing Tools', 'Scientific Calculator'],
    submitted: null
  },
  { 
    id: 3, 
    title: 'Energy Conservation', 
    due: 'Oct 30, 2024', 
    dueDate: new Date('2024-10-30'),
    description: 'Analyzing energy transformations in mechanical systems. Study potential and kinetic energy relationships.',
    status: 'submitted', 
    progress: 100,
    points: 125,
    instructions: 'Complete the energy conservation lab experiment and submit your detailed lab report.',
    materials: ['Lab Equipment', 'Data Collection Sheets', 'Lab Report Template'],
    submitted: new Date('2024-10-15')
  },
  { 
    id: 4, 
    title: 'Wave Properties', 
    due: 'Nov 5, 2024', 
    dueDate: new Date('2024-11-05'),
    description: 'Investigate wave behavior including reflection, refraction, and interference patterns.',
    status: 'assigned', 
    progress: 0,
    points: 200,
    instructions: 'Conduct wave experiments and analyze the collected data. Create visualizations of wave patterns.',
    materials: ['Wave Tank', 'Oscilloscope', 'Measurement Tools'],
    submitted: null
  }
];

// Helper function to get days until due
function getDaysUntilDue(dueDate) {
  const today = new Date();
  const timeDiff = dueDate.getTime() - today.getTime();
  const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));
  return daysDiff;
}

// Sort assignments by due date
const sortedAssignments = assignments.sort((a, b) => a.dueDate.getTime() - b.dueDate.getTime());
---

<StudentLayout title={title} selectedItem="assignments">
  <div class="student-assignments">
    <div class="assignments-header">
      <div class="header-content">
        <h1>My Assignments</h1>
        <p class="header-description">View, track, and submit your assignments</p>
      </div>

      <div class="assignment-filters">
        <button class="filter-btn active" data-filter="all">All</button>
        <button class="filter-btn" data-filter="assigned">To Do</button>
        <button class="filter-btn" data-filter="in-progress">In Progress</button>
        <button class="filter-btn" data-filter="submitted">Submitted</button>
      </div>
    </div>

    <div class="assignments-grid">
      {sortedAssignments.map(assignment => {
        const daysUntilDue = getDaysUntilDue(assignment.dueDate);
        const isOverdue = daysUntilDue < 0 && assignment.status !== 'submitted';
        const isDueSoon = daysUntilDue <= 3 && daysUntilDue >= 0 && assignment.status !== 'submitted';
        
        return (
          <div class={`assignment-card ${assignment.status} ${isOverdue ? 'overdue' : ''} ${isDueSoon ? 'due-soon' : ''}`} data-status={assignment.status}>
            <div class="card-header">
              <div class="title-section">
                <h3>{assignment.title}</h3>
                <div class="assignment-points">{assignment.points} points</div>
              </div>
              <div class="status-section">
                <span class={`status-badge ${assignment.status}`}>
                  {assignment.status === 'assigned' ? 'Not Started' :
                   assignment.status === 'in-progress' ? 'In Progress' :
                   'Submitted'}
                </span>
                {isOverdue && <span class="overdue-badge">Overdue</span>}
                {isDueSoon && !isOverdue && <span class="due-soon-badge">Due Soon</span>}
              </div>
            </div>

            <p class="assignment-description">{assignment.description}</p>

            <div class="assignment-details">
              <div class="due-info">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <circle cx="12" cy="12" r="10"></circle>
                  <polyline points="12,6 12,12 16,14"></polyline>
                </svg>
                <span class="due-date">Due: {assignment.due}</span>
                <span class="days-left">
                  {isOverdue ? `${Math.abs(daysUntilDue)} days overdue` :
                   daysUntilDue === 0 ? 'Due today' :
                   daysUntilDue === 1 ? 'Due tomorrow' :
                   `${daysUntilDue} days left`}
                </span>
              </div>

              {assignment.progress > 0 && (
                <div class="progress-section">
                  <div class="progress-bar">
                    <div class="progress" style={`width: ${assignment.progress}%;`}></div>
                  </div>
                  <span class="progress-text">{assignment.progress}% complete</span>
                </div>
              )}
            </div>

            <div class="assignment-materials">
              <h4>Required Materials:</h4>
              <ul>
                {assignment.materials.map(material => (
                  <li>{material}</li>
                ))}
              </ul>
            </div>

            <div class="assignment-instructions">
              <h4>Instructions:</h4>
              <p>{assignment.instructions}</p>
            </div>

            {assignment.submitted && (
              <div class="submission-info">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <polyline points="20,6 9,17 4,12"></polyline>
                </svg>
                <span>Submitted on {assignment.submitted.toLocaleDateString()}</span>
              </div>
            )}

            <div class="card-actions">
              {assignment.status === 'assigned' && (
                <a href={`/assignments/${assignment.id}/start`} class="btn-primary">
                  <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <polygon points="5,3 19,12 5,21"></polygon>
                  </svg>
                  Start Assignment
                </a>
              )}
              {assignment.status === 'in-progress' && (
                <a href={`/assignments/${assignment.id}/continue`} class="btn-primary">
                  <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"></path>
                    <polyline points="16,6 12,2 8,6"></polyline>
                    <line x1="12" y1="2" x2="12" y2="15"></line>
                  </svg>
                  Continue Working
                </a>
              )}
              {assignment.status === 'submitted' && (
                <a href={`/assignments/${assignment.id}/view`} class="btn-secondary">
                  <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                    <circle cx="12" cy="12" r="3"></circle>
                  </svg>
                  View Submission
                </a>
              )}
              <a href={`/assignments/${assignment.id}/details`} class="btn-outline">
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <circle cx="12" cy="12" r="10"></circle>
                  <line x1="12" y1="16" x2="12" y2="12"></line>
                  <line x1="12" y1="8" x2="12.01" y2="8"></line>
                </svg>
                Details
              </a>
            </div>
          </div>
        );
      })}
    </div>
  </div>
</StudentLayout>

<script>
  // Filter functionality
  document.addEventListener('DOMContentLoaded', () => {
    const filterButtons = document.querySelectorAll('.filter-btn');
    const assignmentCards = document.querySelectorAll('.assignment-card');

    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Update active filter button
        filterButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');

        const filter = (button as HTMLElement).dataset.filter;

        // Show/hide assignment cards based on filter
        assignmentCards.forEach(card => {
          const cardElement = card as HTMLElement;
          if (filter === 'all' || cardElement.dataset.status === filter) {
            cardElement.style.display = 'block';
            cardElement.style.animation = 'fadeIn 0.3s ease-in-out';
          } else {
            cardElement.style.display = 'none';
          }
        });
      });
    });
  });
</script>

<style>
  :root {
    --bg: #1c1c1c;
    --panel: #242424;
    --muted: var(--color-text-muted);
    --accent1: rgb(139, 0, 0);
    --accent2: rgba(139, 0, 0, 0.8);
    --card-bg: rgba(139, 0, 0, 0.1);
    --card-border: rgba(139, 0, 0, 0.2);
    --success: #10b981;
    --warning: #f59e0b;
    --danger: #ef4444;
    --info: #3b82f6;
  }

  .student-assignments {
    padding: 0;
    font-family: 'IBM Plex Sans', system-ui, sans-serif;
    width: 100%;
    color: #E6EEF8;
  }

  .assignments-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .header-content h1 {
    font-size: 2rem;
    font-weight: 600;
    background: linear-gradient(45deg, var(--accent1), #EF4444);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    margin: 0;
  }

  .header-description {
    color: var(--muted);
    margin: 0.25rem 0 0 0;
  }

  .assignment-filters {
    display: flex;
    gap: 0.5rem;
    background: var(--panel);
    padding: 0.5rem;
    border-radius: 8px;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .filter-btn {
    padding: 0.5rem 1rem;
    border: none;
    background: transparent;
    color: var(--muted);
    border-radius: 6px;
    cursor: pointer;
    font-size: 0.9rem;
    font-weight: 500;
    transition: all 0.15s;
  }

  .filter-btn:hover {
    background: rgba(255, 255, 255, 0.05);
    color: white;
  }

  .filter-btn.active {
    background: var(--accent1);
    color: white;
  }

  .assignments-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: 1.5rem;
  }

  .assignment-card {
    background: var(--panel);
    border-radius: 12px;
    padding: 1.5rem;
    border: 1px solid rgba(255, 255, 255, 0.1);
    transition: all 0.2s ease;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .assignment-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    border-color: var(--card-border);
  }

  .assignment-card.overdue {
    border-left: 4px solid var(--danger);
    background: rgba(239, 68, 68, 0.05);
  }

  .assignment-card.due-soon {
    border-left: 4px solid var(--warning);
    background: rgba(245, 158, 11, 0.05);
  }

  .card-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    gap: 1rem;
  }

  .title-section h3 {
    margin: 0;
    color: #F8FAFC;
    font-size: 1.3rem;
    font-weight: 600;
  }

  .assignment-points {
    color: var(--accent1);
    font-size: 0.9rem;
    font-weight: 500;
    margin-top: 0.25rem;
  }

  .status-section {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    gap: 0.5rem;
  }

  .status-badge {
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.75rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .status-badge.assigned {
    background: rgba(156, 163, 175, 0.2);
    color: #d1d5db;
  }

  .status-badge.in-progress {
    background: rgba(59, 130, 246, 0.2);
    color: #60a5fa;
  }

  .status-badge.submitted {
    background: rgba(16, 185, 129, 0.2);
    color: #34d399;
  }

  .overdue-badge {
    background: rgba(239, 68, 68, 0.2);
    color: #fca5a5;
    padding: 0.2rem 0.6rem;
    border-radius: 15px;
    font-size: 0.7rem;
    font-weight: 500;
    text-transform: uppercase;
  }

  .due-soon-badge {
    background: rgba(245, 158, 11, 0.2);
    color: #fbbf24;
    padding: 0.2rem 0.6rem;
    border-radius: 15px;
    font-size: 0.7rem;
    font-weight: 500;
    text-transform: uppercase;
  }

  .assignment-description {
    color: var(--muted);
    line-height: 1.5;
    margin: 0;
  }

  .assignment-details {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .due-info {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--muted);
    font-size: 0.9rem;
  }

  .due-info svg {
    color: var(--accent1);
  }

  .days-left {
    margin-left: auto;
    font-weight: 500;
    color: var(--warning);
  }

  .assignment-card.overdue .days-left {
    color: var(--danger);
  }

  .progress-section {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .progress-bar {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 10px;
    height: 8px;
    flex: 1;
    overflow: hidden;
  }

  .progress {
    height: 100%;
    background: linear-gradient(90deg, var(--accent1), #ef4444);
    border-radius: 10px;
    transition: width 0.3s ease;
  }

  .progress-text {
    font-size: 0.85rem;
    color: var(--muted);
    min-width: fit-content;
  }

  .assignment-materials, .assignment-instructions {
    background: rgba(255, 255, 255, 0.03);
    border-radius: 8px;
    padding: 1rem;
  }

  .assignment-materials h4, .assignment-instructions h4 {
    margin: 0 0 0.5rem 0;
    color: #F8FAFC;
    font-size: 0.9rem;
    font-weight: 600;
  }

  .assignment-materials ul {
    margin: 0;
    padding-left: 1.2rem;
    color: var(--muted);
  }

  .assignment-materials li {
    margin-bottom: 0.25rem;
    font-size: 0.85rem;
  }

  .assignment-instructions p {
    margin: 0;
    color: var(--muted);
    font-size: 0.85rem;
    line-height: 1.4;
  }

  .submission-info {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--success);
    font-size: 0.9rem;
    font-weight: 500;
    background: rgba(16, 185, 129, 0.1);
    padding: 0.75rem;
    border-radius: 8px;
  }

  .card-actions {
    display: flex;
    gap: 0.75rem;
    margin-top: auto;
  }

  .btn-primary, .btn-secondary, .btn-outline {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.25rem;
    border-radius: 8px;
    text-decoration: none;
    font-size: 0.9rem;
    font-weight: 500;
    transition: all 0.15s;
    text-align: center;
    justify-content: center;
    flex: 1;
  }

  .btn-primary {
    background: var(--accent1);
    color: white;
    border: 1px solid var(--accent1);
  }

  .btn-primary:hover {
    background: var(--accent2);
  }

  .btn-secondary {
    background: rgba(255, 255, 255, 0.1);
    color: var(--muted);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .btn-secondary:hover {
    background: rgba(255, 255, 255, 0.15);
    color: white;
  }

  .btn-outline {
    background: transparent;
    color: var(--muted);
    border: 1px solid rgba(255, 255, 255, 0.3);
  }

  .btn-outline:hover {
    background: rgba(255, 255, 255, 0.05);
    color: white;
    border-color: rgba(255, 255, 255, 0.5);
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }

  @media (max-width: 768px) {
    .assignments-header {
      flex-direction: column;
      align-items: flex-start;
    }

    .assignment-filters {
      width: 100%;
      justify-content: center;
    }

    .assignments-grid {
      grid-template-columns: 1fr;
    }

    .card-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.75rem;
    }

    .status-section {
      align-items: flex-start;
      flex-direction: row;
      gap: 0.5rem;
    }

    .card-actions {
      flex-direction: column;
    }

    .due-info {
      flex-wrap: wrap;
    }

    .days-left {
      margin-left: 0;
      margin-top: 0.25rem;
      width: 100%;
    }
  }
</style>