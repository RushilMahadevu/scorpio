---
import AdminLayout from "../../../layouts/AdminLayout.astro";

const title = "Add Student";
---

<AdminLayout title={title} selectedItem="students">
  <div class="admin-create-student">
    <div class="admin-header">
      <h1>Add New Student</h1>
      <p>Create a new student record in the system</p>
    </div>
    
    <div class="student-form-container">
      <form id="create-student-form">
        <div class="form-section">
          <h2 class="section-title">Basic Information</h2>
          
          <div class="form-row">
            <div class="form-group">
              <label for="firstName">First Name <span class="required">*</span></label>
              <input 
                type="text" 
                id="firstName" 
                name="firstName" 
                required 
                placeholder="First Name"
              />
            </div>
            
            <div class="form-group">
              <label for="lastName">Last Name <span class="required">*</span></label>
              <input 
                type="text" 
                id="lastName" 
                name="lastName" 
                required 
                placeholder="Last Name"
              />
            </div>
          </div>
          
          <div class="form-row">
            <div class="form-group">
              <label for="email">Email Address <span class="required">*</span></label>
              <input 
                type="email" 
                id="email" 
                name="email" 
                required 
                placeholder="Email Address"
              />
            </div>
            
            <div class="form-group">
              <label for="phone">Phone Number</label>
              <input 
                type="tel" 
                id="phone" 
                name="phone" 
                placeholder="Phone Number"
              />
            </div>
          </div>
          
          <div class="form-group">
            <label for="dateOfBirth">Date of Birth</label>
            <input type="date" id="dateOfBirth" name="dateOfBirth" />
          </div>
        </div>
        
        <div class="form-section">
          <h2 class="section-title">Class Information</h2>
          
          <div class="form-row">
            <div class="form-group">
              <label for="class">Class <span class="required">*</span></label>
              <select id="class" name="class" required>
                <option value="" disabled selected>Select a class</option>
                <option value="math101">Mathematics 101</option>
                <option value="science102">Science 102</option>
                <option value="history201">History 201</option>
              </select>
            </div>
            
            <div class="form-group">
              <label for="studentId">Student ID</label>
              <input 
                type="text" 
                id="studentId" 
                name="studentId" 
                placeholder="Student ID (auto-generated if left blank)"
              />
            </div>
          </div>
          
          <div class="form-row">
            <div class="form-group">
              <label for="enrollmentDate">Enrollment Date</label>
              <input 
                type="date" 
                id="enrollmentDate" 
                name="enrollmentDate" 
                value={new Date().toISOString().split('T')[0]}
              />
            </div>
            
            <div class="form-group">
              <label for="status">Status</label>
              <select id="status" name="status">
                <option value="active" selected>Active</option>
                <option value="inactive">Inactive</option>
                <option value="pending">Pending</option>
              </select>
            </div>
          </div>
          
          <div class="form-group">
            <label for="notes">Additional Notes</label>
            <textarea 
              id="notes" 
              name="notes" 
              rows="4" 
              placeholder="Any additional notes about the student"
            ></textarea>
          </div>
        </div>
        
        <div class="form-section">
          <h2 class="section-title">Login Information</h2>
          
          <div class="form-group checkbox-group">
            <input type="checkbox" id="createAccount" name="createAccount" checked />
            <label for="createAccount">Create student account with login credentials</label>
          </div>
          
          <div id="credentials-container">
            <div class="form-row">
              <div class="form-group">
                <label for="password">Temporary Password <span class="required">*</span></label>
                <div class="password-input-container">
                  <input 
                    type="password" 
                    id="password" 
                    name="password" 
                    required 
                    placeholder="Temporary password"
                  />
                  <button type="button" id="toggle-password" class="password-toggle">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                      <circle cx="12" cy="12" r="3"></circle>
                    </svg>
                  </button>
                </div>
              </div>
              
              <div class="form-group">
                <label for="confirmPassword">Confirm Password <span class="required">*</span></label>
                <input 
                  type="password" 
                  id="confirmPassword" 
                  name="confirmPassword" 
                  required 
                  placeholder="Confirm password"
                />
              </div>
            </div>
            
            <div class="form-group checkbox-group">
              <input type="checkbox" id="resetPassword" name="resetPassword" checked />
              <label for="resetPassword">Require password change on first login</label>
            </div>
          </div>
        </div>
        
        <div id="form-error" class="form-error hidden"></div>
        
        <div class="form-actions">
          <a href="/admin/students" class="cancel-button">Cancel</a>
          <button type="submit" class="primary-button">
            <span id="submit-text">Add Student</span>
            <div id="submit-spinner" class="button-spinner hidden"></div>
          </button>
        </div>
      </form>
    </div>
  </div>
</AdminLayout>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // Create account checkbox handler
    const createAccountCheckbox = document.getElementById("createAccount") as HTMLInputElement | null;
    const credentialsContainer = document.getElementById("credentials-container");
    const passwordInput = document.getElementById("password") as HTMLInputElement | null;
    const confirmPasswordInput = document.getElementById("confirmPassword") as HTMLInputElement | null;
    
    if (createAccountCheckbox && credentialsContainer && passwordInput && confirmPasswordInput) {
      createAccountCheckbox.addEventListener("change", (e) => {
        if (createAccountCheckbox.checked) {
          credentialsContainer.style.display = "block";
          passwordInput.required = true;
          confirmPasswordInput.required = true;
        } else {
          credentialsContainer.style.display = "none";
          passwordInput.required = false;
          confirmPasswordInput.required = false;
        }
      });
    }
    
    // Toggle password visibility
    const togglePasswordButton = document.getElementById("toggle-password");
    
    if (togglePasswordButton && passwordInput) {
      togglePasswordButton.addEventListener("click", () => {
        const type = passwordInput.getAttribute("type") === "password" ? "text" : "password";
        passwordInput.setAttribute("type", type);
        
        // Update the icon
        const svg = togglePasswordButton.querySelector("svg");
        if (svg) {
          if (type === "password") {
            svg.outerHTML = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
              <circle cx="12" cy="12" r="3"></circle>
            </svg>`;
          } else {
            svg.outerHTML = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path>
              <line x1="1" y1="1" x2="23" y2="23"></line>
            </svg>`;
          }
        }
      });
    }
    
    // Form submission
    const form = document.getElementById("create-student-form");
    const submitText = document.getElementById("submit-text");
    const submitSpinner = document.getElementById("submit-spinner");
    const formError = document.getElementById("form-error");
    
    if (form && submitText && submitSpinner && formError) {
      form.addEventListener("submit", (e) => {
        e.preventDefault();
        
        // Show loading state
        submitText.classList.add("hidden");
        submitSpinner.classList.remove("hidden");
        formError.classList.add("hidden");
        
        // Validate passwords match
        if (createAccountCheckbox?.checked) {
          if (passwordInput?.value !== confirmPasswordInput?.value) {
            formError.textContent = "Passwords do not match";
            formError.classList.remove("hidden");
            submitText.classList.remove("hidden");
            submitSpinner.classList.add("hidden");
            return;
          }
        }
        
        // Here you would normally save the form data to your database
        // For now, we'll just simulate a delay and show a success message
        setTimeout(() => {
          // Success! Show success message and redirect
          formError.textContent = "Student added successfully!";
          formError.classList.remove("hidden");
          formError.classList.add("form-success");
          
          // Reset loading state
          submitText.classList.remove("hidden");
          submitSpinner.classList.add("hidden");
          
          // Redirect after a short delay
          setTimeout(() => {
            window.location.href = "/admin/students";
          }, 1500);
        }, 1000);
      });
    }
  });
</script>

<style>
  .admin-create-student {
    max-width: 1000px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }
  
  .admin-header {
    margin-bottom: 2rem;
  }
  
  .admin-header h1 {
    font-size: 2.5rem;
    margin-bottom: 0.5rem;
    color: white;
  }
  
  .admin-header p {
    font-size: 1.2rem;
    color: rgba(255, 255, 255, 0.7);
  }
  
  .student-form-container {
    background-color: #1a1c25;
    border-radius: 8px;
    padding: 2rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
  
  .form-section {
    margin-bottom: 2.5rem;
    padding-bottom: 2.5rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  .form-section:last-child {
    margin-bottom: 2rem;
    padding-bottom: 0;
    border-bottom: none;
  }
  
  .section-title {
    font-size: 1.5rem;
    color: white;
    margin-bottom: 1.5rem;
  }
  
  .form-row {
    display: flex;
    gap: 1.5rem;
    margin-bottom: 1.5rem;
  }
  
  .form-group {
    flex: 1;
    margin-bottom: 1.5rem;
  }
  
  .form-row .form-group {
    margin-bottom: 0;
  }
  
  .checkbox-group {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 1.5rem;
  }
  
  .checkbox-group input[type="checkbox"] {
    width: 18px;
    height: 18px;
  }
  
  .checkbox-group label {
    margin-bottom: 0;
  }
  
  label {
    display: block;
    margin-bottom: 0.5rem;
    color: white;
    font-weight: 500;
  }
  
  .required {
    color: rgb(231, 76, 60);
  }
  
  input[type="text"],
  input[type="email"],
  input[type="tel"],
  input[type="password"],
  input[type="date"],
  select,
  textarea {
    width: 100%;
    padding: 0.75rem 1rem;
    border-radius: 4px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    background-color: rgba(255, 255, 255, 0.05);
    color: white;
    font-size: 1rem;
    transition: border-color 0.2s;
  }
  
  input[type="text"]:focus,
  input[type="email"]:focus,
  input[type="tel"]:focus,
  input[type="password"]:focus,
  input[type="date"]:focus,
  select:focus,
  textarea:focus {
    outline: none;
    border-color: rgb(136, 58, 234);
  }
  
  select {
    appearance: none;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='white' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 1rem center;
    background-size: 1rem;
    padding-right: 2.5rem;
  }
  
  textarea {
    resize: vertical;
    min-height: 100px;
  }
  
  .password-input-container {
    position: relative;
  }
  
  .password-toggle {
    position: absolute;
    top: 50%;
    right: 1rem;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: rgba(255, 255, 255, 0.6);
    cursor: pointer;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .password-toggle svg {
    width: 18px;
    height: 18px;
  }
  
  .form-actions {
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
    margin-top: 2rem;
  }
  
  .primary-button,
  .cancel-button {
    position: relative;
    padding: 0.75rem 1.5rem;
    border-radius: 4px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.2s;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    justify-content: center;
  }
  
  .primary-button {
    background-color: rgb(136, 58, 234);
    color: white;
    border: none;
  }
  
  .primary-button:hover {
    background-color: rgba(136, 58, 234, 0.8);
  }
  
  .cancel-button {
    background-color: transparent;
    color: white;
    border: 1px solid rgba(255, 255, 255, 0.2);
  }
  
  .cancel-button:hover {
    background-color: rgba(255, 255, 255, 0.05);
    border-color: rgba(255, 255, 255, 0.3);
  }
  
  .form-error {
    background-color: rgba(255, 77, 77, 0.1);
    border-left: 3px solid #ff4d4d;
    color: #ff4d4d;
    padding: 0.75rem 1rem;
    margin-top: 1.5rem;
    border-radius: 0 4px 4px 0;
  }
  
  .form-success {
    background-color: rgba(46, 204, 113, 0.1);
    border-left: 3px solid rgb(46, 204, 113);
    color: rgb(46, 204, 113);
  }
  
  .hidden {
    display: none !important;
  }
  
  .button-spinner {
    width: 20px;
    height: 20px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-top-color: white;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    position: absolute;
    top: 50%;
    left: 50%;
    margin-top: -10px;
    margin-left: -10px;
  }
  
  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }
  
  @media (max-width: 768px) {
    .form-row {
      flex-direction: column;
      gap: 1.5rem;
    }
    
    .form-actions {
      flex-direction: column-reverse;
    }
    
    .primary-button, .cancel-button {
      width: 100%;
      text-align: center;
    }
  }
</style>