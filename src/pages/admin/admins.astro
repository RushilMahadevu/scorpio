---
import AdminLayout from "../../layouts/AdminLayout.astro";

const title = "Manage Admins";
---

<AdminLayout title={title} selectedItem="admins">
  <div class="admin-container">
    <div class="admin-header">
      <h1>Manage Admins</h1>
      <p class="admin-description">Add and manage teacher admin accounts</p>
      
      <div class="action-bar">
        <div class="search-container">
          <input 
            type="text" 
            id="admin-search" 
            placeholder="Search admins..." 
            class="search-input"
          />
          <button class="search-button">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <circle cx="11" cy="11" r="8"></circle>
              <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
            </svg>
          </button>
        </div>
      </div>
    </div>
    
    <div class="admin-card">
      <div class="admin-card-header">
        <h2>Add New Admin</h2>
      </div>
      <div class="admin-card-content">
        <form id="add-admin-form">
          <div class="form-row">
            <div class="form-group">
              <label for="displayName">Admin Name</label>
              <input 
                type="text" 
                id="displayName" 
                name="displayName" 
                required 
                placeholder="Full Name"
              />
            </div>
          </div>
          
          <div class="form-row">
            <div class="form-group">
              <label for="email">Email</label>
              <input 
                type="email" 
                id="email" 
                name="email" 
                required 
                placeholder="Email Address"
              />
            </div>
          </div>
          
          <div class="form-row">
            <div class="form-group">
              <label for="password">Password</label>
              <input 
                type="password" 
                id="password" 
                name="password" 
                required 
                placeholder="Password"
                minlength="6"
              />
            </div>
            
            <div class="form-group">
              <label for="confirmPassword">Confirm Password</label>
              <input 
                type="password" 
                id="confirmPassword" 
                name="confirmPassword" 
                required 
                placeholder="Confirm Password"
                minlength="6"
              />
            </div>
          </div>
          
          <div id="form-error" class="form-error hidden"></div>
          
          <div class="form-actions">
            <button type="submit" class="primary-button">
              <span id="submit-text">Add Admin</span>
              <div id="submit-spinner" class="button-spinner hidden"></div>
            </button>
          </div>
        </form>
      </div>
    </div>
    
    <div class="admin-card">
      <div class="admin-card-header">
        <h2>Current Admins</h2>
      </div>
      <div class="admin-card-content">
        <div id="admins-list" class="admins-list">
          <div class="loading-indicator">Loading...</div>
        </div>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
  import { createAdminUser, getAdminUsers, getCurrentUser } from "../../lib/firebase";
  
  document.addEventListener("DOMContentLoaded", async () => {
    try {
      // Check authentication
      const user = await getCurrentUser();
      if (!user) {
        // Redirect to login if not authenticated
        window.location.href = "/admin/login";
        return;
      }
      
      // Set up form submission handler
      const form = document.getElementById("add-admin-form");
      if (form) {
        form.addEventListener("submit", handleFormSubmit);
      }
      
      // Load existing admins
      loadAdmins();
      
    } catch (error) {
      console.error("Error in admin page:", error);
    }
  });
  
  async function handleFormSubmit(event) {
    event.preventDefault();
    
    const displayNameInput = document.getElementById("displayName");
    const emailInput = document.getElementById("email");
    const passwordInput = document.getElementById("password");
    const confirmPasswordInput = document.getElementById("confirmPassword");
    const formError = document.getElementById("form-error");
    const submitText = document.getElementById("submit-text");
    const submitSpinner = document.getElementById("submit-spinner");
    
    // Validate inputs
    if (!displayNameInput || !emailInput || !passwordInput || !confirmPasswordInput || !formError || !submitText || !submitSpinner) {
      return;
    }
    
    const displayName = displayNameInput.value;
    const email = emailInput.value;
    const password = passwordInput.value;
    const confirmPassword = confirmPasswordInput.value;
    
    // Clear previous errors
    formError.textContent = "";
    formError.classList.add("hidden");
    formError.classList.remove("form-success");
    
    // Validate passwords match
    if (password !== confirmPassword) {
      formError.textContent = "Passwords do not match";
      formError.classList.remove("hidden");
      return;
    }
    
    // Show loading state
    submitText.classList.add("hidden");
    submitSpinner.classList.remove("hidden");
    
    try {
      // Create new admin
      await createAdminUser(email, password, displayName);
      
      // Reset form
      event.target.reset();
      
      // Reload admin list
      loadAdmins();
      
      // Show success message
      formError.textContent = "Admin added successfully!";
      formError.classList.remove("hidden");
      formError.classList.add("form-success");
      
    } catch (error) {
      // Show error message
      formError.textContent = error.message || "Failed to create admin user";
      formError.classList.remove("hidden");
    } finally {
      // Reset loading state
      submitText.classList.remove("hidden");
      submitSpinner.classList.add("hidden");
    }
  }
  
  async function loadAdmins() {
    const adminsList = document.getElementById("admins-list");
    if (!adminsList) return;
    
    try {
      const admins = await getAdminUsers();
      
      if (admins.length === 0) {
        adminsList.innerHTML = `
          <div class="empty-state">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <circle cx="12" cy="12" r="10"></circle>
              <line x1="12" y1="8" x2="12" y2="12"></line>
              <line x1="12" y1="16" x2="12.01" y2="16"></line>
            </svg>
            <p>No admin users found</p>
          </div>
        `;
        return;
      }
      
      // Render admin list
      const adminItems = admins.map(admin => `
        <div class="admin-item">
          <div class="admin-avatar">
            ${admin.displayName ? admin.displayName.charAt(0).toUpperCase() : "A"}
          </div>
          <div class="admin-info">
            <div class="admin-name">${admin.displayName || "Unknown"}</div>
            <div class="admin-email">${admin.email}</div>
          </div>
          <div class="admin-role">Administrator</div>
        </div>
      `).join("");
      
      adminsList.innerHTML = adminItems;
      
    } catch (error) {
      adminsList.innerHTML = `
        <div class="error-state">
          <p>Failed to load admin users: ${error.message}</p>
        </div>
      `;
    }
  }
</script>

<style>
  .admin-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }
  
  .admin-header {
    margin-bottom: 2rem;
  }
  
  .admin-header h1 {
    font-size: 2.5rem;
    margin-bottom: 0.5rem;
    color: white;
  }
  
  .admin-description {
    font-size: 1.2rem;
    color: rgba(255, 255, 255, 0.7);
    margin-bottom: 2rem;
  }
  
  .action-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;
  }
  
  .search-container {
    position: relative;
    flex-grow: 1;
    max-width: 500px;
  }
  
  .search-input {
    width: 100%;
    padding: 0.75rem 1rem;
    padding-right: 3rem;
    border-radius: 6px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    background-color: rgba(255, 255, 255, 0.05);
    color: white;
    font-size: 1rem;
  }
  
  .search-input:focus {
    outline: none;
    border-color: rgb(136, 58, 234);
  }
  
  .search-button {
    position: absolute;
    right: 0;
    top: 0;
    bottom: 0;
    background: none;
    border: none;
    padding: 0 1rem;
    color: white;
    cursor: pointer;
  }
  
  .search-button svg {
    width: 18px;
    height: 18px;
  }
  
  .admin-card {
    background-color: #1a1c25;
    border-radius: 8px;
    overflow: hidden;
    margin-bottom: 2rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
  
  .admin-card-header {
    background-color: rgba(136, 58, 234, 0.1);
    padding: 1.5rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
  }
  
  .admin-card-header h2 {
    margin: 0;
    font-size: 1.5rem;
    color: white;
  }
  
  .admin-card-content {
    padding: 1.5rem;
  }
  
  .form-row {
    display: flex;
    flex-wrap: wrap;
    margin: -0.75rem;
    margin-bottom: 0;
  }
  
  .form-group {
    flex: 1 1 300px;
    padding: 0.75rem;
  }
  
  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    color: white;
    font-weight: 500;
  }
  
  .form-group input {
    width: 100%;
    padding: 0.75rem 1rem;
    border-radius: 4px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    background-color: rgba(255, 255, 255, 0.05);
    color: white;
    font-size: 1rem;
    transition: border-color 0.2s;
  }
  
  .form-group input:focus {
    outline: none;
    border-color: rgb(136, 58, 234);
  }
  
  .form-actions {
    padding: 0.75rem;
    margin-top: 1rem;
  }
  
  .primary-button {
    position: relative;
    padding: 0.75rem 1.5rem;
    border-radius: 4px;
    border: none;
    background-color: rgb(136, 58, 234);
    color: white;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  
  .primary-button:hover {
    background-color: rgba(136, 58, 234, 0.8);
  }
  
  .form-error {
    background-color: rgba(255, 77, 77, 0.1);
    border-left: 3px solid #ff4d4d;
    color: #ff4d4d;
    padding: 0.75rem 1rem;
    margin: 1.5rem 0.75rem 0;
    border-radius: 0 4px 4px 0;
  }
  
  .form-success {
    background-color: rgba(46, 204, 113, 0.1);
    border-left: 3px solid rgb(46, 204, 113);
    color: rgb(46, 204, 113);
  }
  
  .hidden {
    display: none !important;
  }
  
  .button-spinner {
    width: 20px;
    height: 20px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-top-color: white;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    position: absolute;
    top: 50%;
    left: 50%;
    margin-top: -10px;
    margin-left: -10px;
  }
  
  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }
  
  .admins-list {
    min-height: 100px;
  }
  
  .admin-item {
    display: flex;
    align-items: center;
    padding: 1rem;
    border-radius: 4px;
    background-color: rgba(255, 255, 255, 0.05);
    margin-bottom: 0.75rem;
  }
  
  .admin-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: rgb(136, 58, 234);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    font-size: 1.2rem;
    margin-right: 1rem;
  }
  
  .admin-info {
    flex: 1;
  }
  
  .admin-name {
    font-weight: 600;
    color: white;
    margin-bottom: 0.25rem;
  }
  
  .admin-email {
    font-size: 0.9rem;
    color: rgba(255, 255, 255, 0.6);
  }
  
  .admin-role {
    background-color: rgba(136, 58, 234, 0.1);
    color: rgb(136, 58, 234);
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 500;
  }
  
  .loading-indicator {
    text-align: center;
    padding: 1rem;
    color: rgba(255, 255, 255, 0.6);
  }
  
  .empty-state {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    color: rgba(255, 255, 255, 0.4);
    text-align: center;
  }
  
  .empty-state svg {
    width: 40px;
    height: 40px;
    margin-bottom: 1rem;
  }
  
  .error-state {
    background-color: rgba(255, 77, 77, 0.1);
    border-left: 3px solid #ff4d4d;
    color: #ff4d4d;
    padding: 0.75rem 1rem;
    border-radius: 0 4px 4px 0;
  }
  
  @media (max-width: 768px) {
    .action-bar {
      flex-direction: column;
      align-items: stretch;
    }
    
    .admin-item {
      flex-direction: column;
      align-items: flex-start;
    }
    
    .admin-avatar {
      margin-bottom: 0.75rem;
    }
    
    .admin-role {
      margin-top: 0.75rem;
    }
  }
</style>