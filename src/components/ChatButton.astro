<button id="chat-button" class="chat-button" aria-label="Open Scorpio AI">
  <svg viewBox="0 0 24 24" fill="none">
    <path 
      d="M12 2C6.48 2 2 6.02 2 10.5C2 13.24 3.58 15.67 6 17.15V22L10.32 19.74C10.87 19.85 11.43 19.9 12 19.9C17.52 19.9 22 15.88 22 11.4C22 6.92 17.52 2 12 2Z" 
      fill="currentColor"
    />
  </svg>
</button>

<!-- Scorpio AI Sidebar -->
<div id="scorpio-ai-sidebar" class="sidebar hidden">
  <div class="sidebar-header">
    <h2>Scorpio AI</h2>
    <button id="close-sidebar" class="close-button" aria-label="Close Scorpio AI">
      <svg viewBox="0 0 24 24" fill="none">
        <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
      </svg>
    </button>
  </div>
  <div class="sidebar-content">
    <div class="chat-area">
      <div class="messages" id="chat-messages">
        <div class="message ai-message">
          <p>Hello! I'm Scorpio AI, your AP Physics C: Mechanics tutor. I can help you understand concepts, solve problems, and prepare for the AP exam. What would you like to work on today?</p>
        </div>
      </div>
      <div class="input-area">
        <input 
          type="text" 
          id="chat-input" 
          placeholder="Type your message..." 
          class="chat-input"
        />
        <button id="send-button" class="send-button" aria-label="Send message">
          <svg viewBox="0 0 24 24" fill="none">
            <path d="M22 2L11 13M22 2L15 22L11 13M22 2L2 10L11 13" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Sidebar Overlay -->
<div id="sidebar-overlay" class="sidebar-overlay hidden"></div>
<style>
  .chat-button {
    position: fixed;
    bottom: 24px;
    right: 24px;
    width: 64px;
    height: 64px;
    background: var(--color-primary, rgb(139, 0, 0));
    border: none;
    border-radius: 50%;
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 6px 16px var(--color-primary, rgba(139, 0, 0, 0.4));
    transition: transform 0.25s ease, box-shadow 0.25s ease, background 0.25s ease;
    z-index: 9999;
  }

  .chat-button:hover {
    background: var(--color-primary-hover, rgba(139, 0, 0, 0.8));
    transform: scale(1.08);
    box-shadow: 0 8px 18px var(--color-primary, rgba(139, 0, 0, 0.6));
  }

  .chat-button:active {
    transform: scale(0.92);
  }

  .chat-button svg {
    width: 26px;
    height: 26px;
  }

  /* Sidebar Styles - Matching Admin Design */
  .sidebar {
    position: fixed;
    top: 0;
    right: 0;
    width: 400px;
    height: 100vh;
    background: var(--color-bg, #1c1c1c);
    box-shadow: -4px 0 15px rgba(0, 0, 0, 0.15);
    transform: translateX(100%);
    transition: transform 0.3s ease;
    z-index: 10000;
    display: flex;
    flex-direction: column;
    overflow-y: auto;
  }

  .sidebar.open {
    transform: translateX(0);
  }

  .sidebar.hidden {
    display: none;
  }

  .sidebar-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid var(--color-border, rgba(255, 255, 255, 0.1));
    background: var(--color-bg, #1c1c1c);
    position: sticky;
    top: 0;
    z-index: 1;
  }

  .sidebar-header h2 {
    margin: 0;
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--color-text, white);
    font-family: inherit;
  }

  .close-button {
    background: transparent;
    border: none;
    cursor: pointer;
    padding: 0.85rem 1rem;
    border-radius: 10px;
    color: var(--color-text-muted, rgba(255, 255, 255, 0.7));
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    font-weight: 500;
  }

  .close-button:hover {
    background-color: var(--color-hover-bg, rgba(139, 0, 0, 0.08));
    color: var(--color-text, white);
    transform: translateX(-4px);
  }

  .close-button svg {
    width: 20px;
    height: 20px;
    opacity: 0.8;
  }

  .sidebar-content {
    flex: 1;
    display: flex;
    flex-direction: column;
    overflow: hidden;
  }

  .chat-area {
    flex: 1;
    display: flex;
    flex-direction: column;
    height: 100%;
  }

  .messages {
    flex: 1;
    padding: 1.5rem;
    overflow-y: auto;
    background: var(--color-bg, #1c1c1c);
  }

  .message {
    margin-bottom: 16px;
    padding: 0.85rem 1rem;
    border-radius: 10px;
    max-width: 85%;
    transition: all 0.2s ease;
    border: 1px solid transparent;
  }

  .ai-message {
    background-color: var(--color-hover-bg, rgba(139, 0, 0, 0.08));
    color: var(--color-text-muted, rgba(255, 255, 255, 0.9));
    align-self: flex-start;
    border: 1px solid var(--color-border, rgba(255, 255, 255, 0.1));
  }

  .user-message {
    background-color: var(--color-hover-bg, rgba(139, 0, 0, 0.15));
    color: var(--color-text, white);
    align-self: flex-end;
    margin-left: auto;
    border-left: 3px solid var(--color-primary, rgb(139, 0, 0));
    font-weight: 500;
  }

  .message p {
    margin: 0;
    line-height: 1.5;
    font-family: inherit;
  }

  /* Typing indicator styles */
  .typing {
    opacity: 0.8;
  }

  .typing-dots {
    display: inline-flex;
    align-items: center;
    gap: 2px;
  }

  .typing-dots span {
    width: 6px;
    height: 6px;
    background: rgba(255, 255, 255, 0.6);
    border-radius: 50%;
    display: inline-block;
    animation: typing 1.4s infinite ease-in-out;
    font-size: 0;
  }

  .typing-dots span:nth-child(1) {
    animation-delay: 0s;
  }

  .typing-dots span:nth-child(2) {
    animation-delay: 0.2s;
  }

  .typing-dots span:nth-child(3) {
    animation-delay: 0.4s;
  }

  @keyframes typing {
    0%, 60%, 100% {
      transform: translateY(0);
      opacity: 0.4;
    }
    30% {
      transform: translateY(-10px);
      opacity: 1;
    }
  }

  .input-area {
    padding: 1.5rem;
    border-top: 1px solid var(--color-border, rgba(255, 255, 255, 0.1));
    background: var(--color-bg, #1c1c1c);
    display: flex;
    gap: 0.4rem;
    align-items: center;
  }

  .chat-input {
    flex: 1;
    padding: 0.85rem 1rem;
    border: 1px solid var(--color-border, rgba(255, 255, 255, 0.1));
    border-radius: 10px;
    font-size: 14px;
    outline: none;
    transition: all 0.2s ease;
    background: var(--color-hover-bg, rgba(255, 255, 255, 0.05));
    color: var(--color-text-muted, rgba(255, 255, 255, 0.9));
    font-family: inherit;
    font-weight: 500;
  }

  .chat-input:focus {
    border-color: var(--color-primary, rgb(139, 0, 0));
    background: var(--color-hover-bg, rgba(139, 0, 0, 0.08));
    transform: translateY(-1px);
  }

  .chat-input::placeholder {
    color: var(--color-text-muted, rgba(255, 255, 255, 0.6));
  }

  .send-button {
    background: transparent;
    border: 1px solid var(--color-border, rgba(255, 255, 255, 0.1));
    border-radius: 10px;
    color: var(--color-text-muted, rgba(255, 255, 255, 0.7));
    cursor: pointer;
    padding: 0.85rem 1rem;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 500;
    position: relative;
    overflow: hidden;
  }

  .send-button:hover {
    background-color: var(--color-hover-bg, rgba(139, 0, 0, 0.08));
    color: var(--color-text, white);
    transform: translateX(4px);
  }

  .send-button::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 0%;
    height: 2px;
    background-color: var(--color-primary, rgb(139, 0, 0));
    transition: width 0.3s ease;
  }

  .send-button:hover::after {
    width: 100%;
  }

  .send-button svg {
    width: 20px;
    height: 20px;
    opacity: 0.8;
  }

  .sidebar-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0, 0, 0, 0.7);
    z-index: 9998;
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
  }

  .sidebar-overlay.visible {
    opacity: 1;
    pointer-events: auto;
  }

  .sidebar-overlay.hidden {
    display: none;
  }

  @media (max-width: 992px) {
    .sidebar {
      width: 340px;
    }
  }

  @media (max-width: 768px) {
    .chat-button {
      width: 56px;
      height: 56px;
      bottom: 20px;
      right: 20px;
    }

    .chat-button svg {
      width: 22px;
      height: 22px;
    }

    .sidebar {
      width: 100vw;
    }
    
    .sidebar-header {
      padding: 1rem;
    }
    
    .input-area {
      padding: 1rem;
    }
    
    .messages {
      padding: 1rem;
    }
  }

  @media (max-width: 480px) {
    .chat-button {
      bottom: 16px;
      right: 16px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const chatButton = document.getElementById('chat-button');
    const sidebar = document.getElementById('scorpio-ai-sidebar');
    const overlay = document.getElementById('sidebar-overlay');
    const closeButton = document.getElementById('close-sidebar');
    const chatInput = document.getElementById('chat-input');
    const sendButton = document.getElementById('send-button');
    const messagesContainer = document.getElementById('chat-messages');

    function openSidebar() {
      sidebar?.classList.remove('hidden');
      overlay?.classList.remove('hidden');
      
      // Trigger reflow to ensure the element is rendered before starting transitions
      sidebar?.offsetHeight;
      overlay?.offsetHeight;
      
      // Start the animations
      setTimeout(() => {
        sidebar?.classList.add('open');
        overlay?.classList.add('visible');
      }, 10);
      
      // Focus on input when sidebar opens
      setTimeout(() => {
        chatInput?.focus();
      }, 300);
    }

    function closeSidebar() {
      sidebar?.classList.remove('open');
      overlay?.classList.remove('visible');
      
      setTimeout(() => {
        sidebar?.classList.add('hidden');
        overlay?.classList.add('hidden');
      }, 300);
    }

    function addMessage(content, isUser = false) {
      const messageDiv = document.createElement('div');
      messageDiv.className = `message ${isUser ? 'user-message' : 'ai-message'}`;
      
      // Format the content for better display (simple markdown-like formatting)
      let formattedContent = content;
      if (!isUser) {
        // Convert **bold** to <strong>bold</strong>
        formattedContent = formattedContent.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
        // Convert *italic* to <em>italic</em>
        formattedContent = formattedContent.replace(/\*(.*?)\*/g, '<em>$1</em>');
        // Convert newlines to <br> for better formatting
        formattedContent = formattedContent.replace(/\n/g, '<br>');
      }
      
      messageDiv.innerHTML = `<p>${formattedContent}</p>`;
      messagesContainer?.appendChild(messageDiv);
      messagesContainer?.scrollTo({ top: messagesContainer.scrollHeight, behavior: 'smooth' });
    }

    // Conversation history for context-aware responses
    let conversationHistory = [];
    
    // Question categorization for adaptive prompting
    function categorizeQuestion(message) {
      const lowerMessage = message.toLowerCase();
      
      if (lowerMessage.includes('derivative') || lowerMessage.includes('velocity') || lowerMessage.includes('acceleration')) {
        return 'kinematics_calculus';
      } else if (lowerMessage.includes('force') || lowerMessage.includes('newton') || lowerMessage.includes('mass')) {
        return 'dynamics';
      } else if (lowerMessage.includes('energy') || lowerMessage.includes('work') || lowerMessage.includes('kinetic') || lowerMessage.includes('potential')) {
        return 'energy';
      } else if (lowerMessage.includes('momentum') || lowerMessage.includes('collision') || lowerMessage.includes('impulse')) {
        return 'momentum';
      } else if (lowerMessage.includes('rotation') || lowerMessage.includes('angular') || lowerMessage.includes('torque')) {
        return 'rotational';
      } else if (lowerMessage.includes('oscillation') || lowerMessage.includes('harmonic') || lowerMessage.includes('pendulum') || lowerMessage.includes('spring')) {
        return 'oscillations';
      } else if (lowerMessage.includes('gravity') || lowerMessage.includes('orbit') || lowerMessage.includes('satellite')) {
        return 'gravitation';
      } else {
        return 'general';
      }
    }

    async function sendMessage() {
      const message = (chatInput as HTMLInputElement)?.value.trim();
      if (!message) return;

      // Add user message to conversation history
      conversationHistory.push({ role: 'user', content: message });
      
      // Add user message to UI
      addMessage(message, true);
      (chatInput as HTMLInputElement).value = '';

      // Show typing indicator
      const typingIndicator = document.createElement('div');
      typingIndicator.className = 'message ai-message typing';
      typingIndicator.innerHTML = '<p><span class="typing-dots"><span>.</span><span>.</span><span>.</span></span></p>';
      messagesContainer?.appendChild(typingIndicator);
      messagesContainer?.scrollTo({ top: messagesContainer.scrollHeight, behavior: 'smooth' });

      try {
        // Import the model from firebase
        const { model } = await import('../lib/firebase');
        
        // Categorize the question for adaptive prompting
        const questionCategory = categorizeQuestion(message);
        
        // Build conversation context (last 3 exchanges max for token efficiency)
        const recentHistory = conversationHistory.slice(-6).map(entry => 
          `${entry.role === 'user' ? 'Student' : 'Scorpio AI'}: ${entry.content}`
        ).join('\n');
        
        // Category-specific prompting
        const categoryPrompts = {
          'kinematics_calculus': `
# SPECIALIZED FOCUS: Calculus-Based Kinematics
Pay special attention to:
- Position, velocity, acceleration relationships: x(t), v(t) = dx/dt, a(t) = dv/dt
- Integration techniques for finding position from acceleration
- Graph interpretation and slope/area relationships
- Relative motion problems`,
          
          'dynamics': `
# SPECIALIZED FOCUS: Newton's Laws & Forces
Pay special attention to:
- Free body diagrams and force analysis
- Newton's 2nd Law: ΣF = ma (vector form)
- Friction (static μs, kinetic μk)
- Inclined planes and constraint forces`,
          
          'energy': `
# SPECIALIZED FOCUS: Work-Energy Theorem
Pay special attention to:
- Work: W = ∫F⃗·dr⃗ (calculus definition)
- Kinetic Energy: KE = ½mv²
- Potential Energy: gravitational (mgh), elastic (½kx²)
- Conservation of mechanical energy`,
          
          'momentum': `
# SPECIALIZED FOCUS: Momentum & Collisions
Pay special attention to:
- Linear momentum: p⃗ = mv⃗
- Impulse-momentum theorem: J⃗ = Δp⃗ = ∫F⃗dt
- Conservation in collisions (elastic vs inelastic)
- Center of mass motion`,
          
          'rotational': `
# SPECIALIZED FOCUS: Rotational Motion
Pay special attention to:
- Angular kinematics: θ, ω = dθ/dt, α = dω/dt
- Rotational dynamics: τ = Iα
- Moment of inertia calculations
- Angular momentum: L = Iω`,
          
          'oscillations': `
# SPECIALIZED FOCUS: Simple Harmonic Motion
Pay special attention to:
- SHM equations: x(t) = A cos(ωt + φ)
- Period and frequency relationships
- Energy in oscillatory systems
- Physical vs simple pendulum`,
          
          'gravitation': `
# SPECIALIZED FOCUS: Universal Gravitation
Pay special attention to:
- Newton's law of gravitation: F = Gm₁m₂/r²
- Gravitational potential energy: U = -Gm₁m₂/r
- Orbital mechanics and Kepler's laws
- Escape velocity calculations`,
          
          'general': ''
        };

        // Advanced prompt engineering for AP Physics C: Mechanics
        const contextPrompt = `# ROLE & EXPERTISE
You are Scorpio AI, an expert AP Physics C: Mechanics tutor with deep knowledge of calculus-based physics. You have years of experience helping students master complex concepts and excel on the AP exam.

# CORE COMPETENCIES
- Kinematics with calculus (derivatives for velocity/acceleration)
- Newton's Laws and their applications
- Work-Energy Theorem and Conservation of Energy  
- Linear and Angular Momentum Conservation
- Rotational Motion and Moment of Inertia
- Simple Harmonic Motion and Oscillations
- Universal Gravitation and Orbital Mechanics

${categoryPrompts[questionCategory]}

# RESPONSE FRAMEWORK
When answering questions, follow this structure:
1. **Concept Identification**: Identify the key physics principles involved
2. **Equation Setup**: Present relevant equations with clear variable definitions
3. **Step-by-Step Solution**: Break down problem-solving into logical steps
4. **Conceptual Explanation**: Explain the underlying physics concepts
5. **Common Pitfalls**: Highlight frequent student mistakes to avoid
6. **AP Exam Context**: Relate to typical AP exam question types when relevant

# COMMUNICATION STYLE
- Use clear, concise language appropriate for high school students
- Include mathematical notation when helpful: use * for multiplication, ^ for exponents
- Provide analogies and real-world examples to illustrate abstract concepts
- Ask follow-up questions to gauge understanding
- Encourage active problem-solving rather than just giving answers

# CONSTRAINTS
- Focus exclusively on AP Physics C: Mechanics curriculum
- Use calculus when appropriate (derivatives, integrals)
- Provide hints before full solutions to promote learning
- Limit responses to 200-300 words for clarity

# CONVERSATION CONTEXT
${recentHistory ? `Recent conversation:\n${recentHistory}\n` : ''}

# STUDENT CONTEXT
This student is preparing for the AP Physics C: Mechanics exam and needs support with both conceptual understanding and problem-solving techniques.

---

**Current Student Question**: ${message}

**Response**:`;

        // Generate AI response using Gemini
        const result = await model.generateContent(contextPrompt);
        const response = await result.response;
        const aiText = response.text();

        // Remove typing indicator
        if (typingIndicator) {
          typingIndicator.remove();
        }

        // Add AI response to conversation history
        conversationHistory.push({ role: 'assistant', content: aiText });
        
        // Keep conversation history manageable (last 10 exchanges)
        if (conversationHistory.length > 20) {
          conversationHistory = conversationHistory.slice(-20);
        }

        // Add AI response to UI
        addMessage(aiText, false);
      } catch (error) {
        console.error('AI response error:', error);
        
        // Remove typing indicator
        if (typingIndicator) {
          typingIndicator.remove();
        }

        // Add fallback response
        addMessage("I apologize, but I'm having trouble processing your request right now. Please try again in a moment.", false);
      }
    }

    // Event listeners
    chatButton?.addEventListener('click', openSidebar);
    closeButton?.addEventListener('click', closeSidebar);
    overlay?.addEventListener('click', closeSidebar);
    sendButton?.addEventListener('click', sendMessage);

    chatInput?.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        sendMessage();
      }
    });

    // Prevent sidebar from closing when clicking inside it
    sidebar?.addEventListener('click', (e) => {
      e.stopPropagation();
    });
  });
</script>
